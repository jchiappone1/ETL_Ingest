<transformation>
  <info>
    <name>myEncryptTest</name>
    <description/>
    <extended_description/>
    <trans_version/>
    <trans_type>Normal</trans_type>
    <trans_status>0</trans_status>
    <directory>&#x2f;Ingestion&#x2f;Utilities</directory>
    <parameters>
    </parameters>
    <log>
<trans-log-table><connection/>
<schema/>
<table/>
<size_limit_lines/>
<interval/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>TRANSNAME</id><enabled>Y</enabled><name>TRANSNAME</name></field><field><id>STATUS</id><enabled>Y</enabled><name>STATUS</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name><subject/></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name><subject/></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name><subject/></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name><subject/></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name><subject/></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name><subject/></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>STARTDATE</id><enabled>Y</enabled><name>STARTDATE</name></field><field><id>ENDDATE</id><enabled>Y</enabled><name>ENDDATE</name></field><field><id>LOGDATE</id><enabled>Y</enabled><name>LOGDATE</name></field><field><id>DEPDATE</id><enabled>Y</enabled><name>DEPDATE</name></field><field><id>REPLAYDATE</id><enabled>Y</enabled><name>REPLAYDATE</name></field><field><id>LOG_FIELD</id><enabled>Y</enabled><name>LOG_FIELD</name></field><field><id>EXECUTING_SERVER</id><enabled>N</enabled><name>EXECUTING_SERVER</name></field><field><id>EXECUTING_USER</id><enabled>N</enabled><name>EXECUTING_USER</name></field><field><id>CLIENT</id><enabled>N</enabled><name>CLIENT</name></field></trans-log-table>
<perf-log-table><connection/>
<schema/>
<table/>
<interval/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>SEQ_NR</id><enabled>Y</enabled><name>SEQ_NR</name></field><field><id>LOGDATE</id><enabled>Y</enabled><name>LOGDATE</name></field><field><id>TRANSNAME</id><enabled>Y</enabled><name>TRANSNAME</name></field><field><id>STEPNAME</id><enabled>Y</enabled><name>STEPNAME</name></field><field><id>STEP_COPY</id><enabled>Y</enabled><name>STEP_COPY</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>INPUT_BUFFER_ROWS</id><enabled>Y</enabled><name>INPUT_BUFFER_ROWS</name></field><field><id>OUTPUT_BUFFER_ROWS</id><enabled>Y</enabled><name>OUTPUT_BUFFER_ROWS</name></field></perf-log-table>
<channel-log-table><connection/>
<schema/>
<table/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>LOG_DATE</id><enabled>Y</enabled><name>LOG_DATE</name></field><field><id>LOGGING_OBJECT_TYPE</id><enabled>Y</enabled><name>LOGGING_OBJECT_TYPE</name></field><field><id>OBJECT_NAME</id><enabled>Y</enabled><name>OBJECT_NAME</name></field><field><id>OBJECT_COPY</id><enabled>Y</enabled><name>OBJECT_COPY</name></field><field><id>REPOSITORY_DIRECTORY</id><enabled>Y</enabled><name>REPOSITORY_DIRECTORY</name></field><field><id>FILENAME</id><enabled>Y</enabled><name>FILENAME</name></field><field><id>OBJECT_ID</id><enabled>Y</enabled><name>OBJECT_ID</name></field><field><id>OBJECT_REVISION</id><enabled>Y</enabled><name>OBJECT_REVISION</name></field><field><id>PARENT_CHANNEL_ID</id><enabled>Y</enabled><name>PARENT_CHANNEL_ID</name></field><field><id>ROOT_CHANNEL_ID</id><enabled>Y</enabled><name>ROOT_CHANNEL_ID</name></field></channel-log-table>
<step-log-table><connection/>
<schema/>
<table/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>LOG_DATE</id><enabled>Y</enabled><name>LOG_DATE</name></field><field><id>TRANSNAME</id><enabled>Y</enabled><name>TRANSNAME</name></field><field><id>STEPNAME</id><enabled>Y</enabled><name>STEPNAME</name></field><field><id>STEP_COPY</id><enabled>Y</enabled><name>STEP_COPY</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>LOG_FIELD</id><enabled>N</enabled><name>LOG_FIELD</name></field></step-log-table>
<metrics-log-table><connection/>
<schema/>
<table/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>LOG_DATE</id><enabled>Y</enabled><name>LOG_DATE</name></field><field><id>METRICS_DATE</id><enabled>Y</enabled><name>METRICS_DATE</name></field><field><id>METRICS_CODE</id><enabled>Y</enabled><name>METRICS_CODE</name></field><field><id>METRICS_DESCRIPTION</id><enabled>Y</enabled><name>METRICS_DESCRIPTION</name></field><field><id>METRICS_SUBJECT</id><enabled>Y</enabled><name>METRICS_SUBJECT</name></field><field><id>METRICS_TYPE</id><enabled>Y</enabled><name>METRICS_TYPE</name></field><field><id>METRICS_VALUE</id><enabled>Y</enabled><name>METRICS_VALUE</name></field></metrics-log-table>
    </log>
    <maxdate>
      <connection/>
      <table/>
      <field/>
      <offset>0.0</offset>
      <maxdiff>0.0</maxdiff>
    </maxdate>
    <size_rowset>10000</size_rowset>
    <sleep_time_empty>50</sleep_time_empty>
    <sleep_time_full>50</sleep_time_full>
    <unique_connections>N</unique_connections>
    <feedback_shown>Y</feedback_shown>
    <feedback_size>50000</feedback_size>
    <using_thread_priorities>Y</using_thread_priorities>
    <shared_objects_file/>
    <capture_step_performance>N</capture_step_performance>
    <step_performance_capturing_delay>1000</step_performance_capturing_delay>
    <step_performance_capturing_size_limit>100</step_performance_capturing_size_limit>
    <dependencies>
    </dependencies>
    <partitionschemas>
    </partitionschemas>
    <slaveservers>
    </slaveservers>
    <clusterschemas>
    </clusterschemas>
  <created_user/>
  <created_date>2016&#x2f;09&#x2f;25 16&#x3a;24&#x3a;34.959</created_date>
  <modified_user>-</modified_user>
  <modified_date>2016&#x2f;08&#x2f;16 23&#x3a;46&#x3a;14.893</modified_date>
    <key_for_session_key>H4sIAAAAAAAAAAMAAAAAAAAAAAA&#x3d;</key_for_session_key>
    <is_key_private>N</is_key_private>
  </info>
  <notepads>
  </notepads>
  <connection>
    <name>IQ</name>
    <server>&#x24;&#x7b;bioiq.cm.db.server&#x7d;</server>
    <type>MYSQL</type>
    <access>Native</access>
    <database>&#x24;&#x7b;bioiq.cm.db.name&#x7d;</database>
    <port>&#x24;&#x7b;bioiq.cm.db.port&#x7d;</port>
    <username>&#x24;&#x7b;bioiq.cm.db.user&#x7d;</username>
    <password>&#x24;&#x7b;bioiq.cm.db.password&#x7d;</password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute><code>EXTRA_OPTION_MYSQL.defaultFetchSize</code><attribute>500</attribute></attribute>
      <attribute><code>EXTRA_OPTION_MYSQL.useCursorFetch</code><attribute>true</attribute></attribute>
      <attribute><code>FORCE_IDENTIFIERS_TO_LOWERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>FORCE_IDENTIFIERS_TO_UPPERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>IS_CLUSTERED</code><attribute>N</attribute></attribute>
      <attribute><code>PORT_NUMBER</code><attribute>&#x24;&#x7b;bioiq.cm.db.port&#x7d;</attribute></attribute>
      <attribute><code>PRESERVE_RESERVED_WORD_CASE</code><attribute>N</attribute></attribute>
      <attribute><code>QUOTE_ALL_FIELDS</code><attribute>N</attribute></attribute>
      <attribute><code>STREAM_RESULTS</code><attribute>N</attribute></attribute>
      <attribute><code>SUPPORTS_BOOLEAN_DATA_TYPE</code><attribute>Y</attribute></attribute>
      <attribute><code>SUPPORTS_TIMESTAMP_DATA_TYPE</code><attribute>Y</attribute></attribute>
      <attribute><code>USE_POOLING</code><attribute>N</attribute></attribute>
    </attributes>
  </connection>
  <order>
  <hop> <from>EnCrypt Fields</from><to>Write to log</to><enabled>N</enabled> </hop>
  <hop> <from>ti&#x3a; sdi_hl7_obx_observation</from><to>EnCrypt Fields</to><enabled>N</enabled> </hop>
  <hop> <from>ti&#x3a; sdi_hl7_obx_observation</from><to>User Defined Java Class</to><enabled>N</enabled> </hop>
  <hop> <from>User Defined Java Class</from><to>Write to log</to><enabled>N</enabled> </hop>
  <hop> <from>uppercase</from><to>Write to log</to><enabled>N</enabled> </hop>
  <hop> <from>ti&#x3a; sdi_hl7_obx_observation</from><to>Write to log</to><enabled>N</enabled> </hop>
  <hop> <from>Generate Rows</from><to>uppercase 2</to><enabled>Y</enabled> </hop>
  <hop> <from>uppercase 2</from><to>uppercase</to><enabled>N</enabled> </hop>
  <hop> <from>uppercase 2</from><to>Write to log</to><enabled>Y</enabled> </hop>
  </order>
  <step>
    <name>EnCrypt Fields</name>
    <type>UserDefinedJavaClass</type>
    <description/>
    <distribute>N</distribute>
    <custom_distribution/>
    <copies>&#x24;&#x7b;bioiq.decrypt.copies&#x7d;</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>

    <definitions>
        <definition>
        <class_type>TRANSFORM_CLASS</class_type>

        <class_name>Processor</class_name>

        <class_source><![CDATA[

import org.jruby.Ruby;
import org.jruby.RubyObject;
import org.jruby.runtime.Helpers;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.javasupport.JavaUtil;
import org.jruby.RubyClass;


public class Crypto extends RubyObject  {
    private static final Ruby __ruby__ = Ruby.getGlobalRuntime();
    private static final RubyClass __metaclass__;
    static final String key = "40kz0K+Kl62BOFY";


    static {
        String source = new StringBuilder("require 'java'\n" +
            "require 'openssl'\n" +
            "require 'base64'\n" +
            "\n" +
            "class Crypto\n" +
            "  java_signature 'String decrypt(String, String)'\n" +
            "  def Crypto.decrypt(string, key)\n" +
            "    raw_ciphertext = Base64.decode64(string)\n" +
            "    cipher = OpenSSL::Cipher::Cipher.new('AES-256-CBC')\n" +
            "    cipher.decrypt\n" +
            "    cipher.pkcs5_keyivgen(key)\n" +
            "\n" +
            "    plaintext = cipher.update(raw_ciphertext)\n" +
            "    plaintext << cipher.final\n" +
            "    return plaintext\n" +
            "  end\n" +
            "\n" +
            "  java_signature 'String encrypt(String, String)'\n" +
            "  def Crypto.encrypt(string, key)\n" +
            "    cipher = OpenSSL::Cipher::Cipher.new('AES-256-CBC')\n" +
            "    cipher.encrypt\n" +
            "    cipher.pkcs5_keyivgen(key)\n" +
            "\n" +
            "    plaintext = cipher.update(string)\n" +
            "    plaintext << cipher.final\n" +
            "    return Base64.encode64(plaintext)\n" +
            "  end\n" +
            "end\n" +
            "").toString();
        __ruby__.executeScript(source, "crypto.rb");
        RubyClass metaclass = __ruby__.getClass("Crypto");
        if (metaclass == null) throw new NoClassDefFoundError("Could not load Ruby class: Crypto");
        metaclass.setRubyStaticAllocator(Crypto.class);
        __metaclass__ = metaclass;
    }

    public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException
{
    Object[] r = getRow();

    if (r == null) {
      setOutputDone();
      return false;
    }

    r = createOutputRow(r, data.outputRowMeta.size());

    String[] fields = getParameter("FIELD_LIST").split(",");

    for(int i = 0; i < fields.length; i++) {
        String encrypted = get(Fields.In, fields[i].trim()).getString(r);
        String decrypted = null;
        if( encrypted != null ) {
            encrypted = Crypto.encrypt(string, key);
            //encrypted = encrypted.replaceAll("\n","");
            //decrypted = decodeAndDecryptUsingRuby(encrypted);
        }
        get(Fields.Out, fields[i].trim()).setValue(r, encrypted);
    }

    putRow(data.outputRowMeta, r);

    return true;
}

    /**
     * Standard Ruby object constructor, for construction-from-Ruby purposes.
     * Generally not for user consumption.
     *
     * @param ruby The JRuby instance this object will belong to
     * @param metaclass The RubyClass representing the Ruby class of this object
     */
    private Crypto(Ruby ruby, RubyClass metaclass) {
        super(ruby, metaclass);
    }

    /**
     * A static method used by JRuby for allocating instances of this object
     * from Ruby. Generally not for user comsumption.
     *
     * @param ruby The JRuby instance this object will belong to
     * @param metaclass The RubyClass representing the Ruby class of this object
     */
    public static IRubyObject __allocate__(Ruby ruby, RubyClass metaClass) {
        return new Crypto(ruby, metaClass);
    }

    /**
     * Default constructor. Invokes this(Ruby, RubyClass) with the classloader-static
     * Ruby and RubyClass instances assocated with this class, and then invokes the
     * no-argument 'initialize' method in Ruby.
     */
    public Crypto() {
        this(__ruby__, __metaclass__);
        Helpers.invoke(__ruby__.getCurrentContext(), this, "initialize");
    }


    
    public static String decrypt(String string, String key) {
        IRubyObject ruby_arg_string = JavaUtil.convertJavaToRuby(__ruby__, string);
        IRubyObject ruby_arg_key = JavaUtil.convertJavaToRuby(__ruby__, key);
        IRubyObject ruby_result = Helpers.invoke(__ruby__.getCurrentContext(), __metaclass__, "decrypt", ruby_arg_string, ruby_arg_key);
        return (String)ruby_result.toJava(String.class);

    }

    
    public static String encrypt(String string, String key) {
        IRubyObject ruby_arg_string = JavaUtil.convertJavaToRuby(__ruby__, string);
        IRubyObject ruby_arg_key = JavaUtil.convertJavaToRuby(__ruby__, key);
        IRubyObject ruby_result = Helpers.invoke(__ruby__.getCurrentContext(), __metaclass__, "encrypt", ruby_arg_string, ruby_arg_key);
        return (String)ruby_result.toJava(String.class);

    }

}
]]></class_source>
        </definition>
    </definitions>
    <fields>
        <field>
        <field_name>fname</field_name>

        <field_type>String</field_type>

        <field_length>-1</field_length>

        <field_precision>-1</field_precision>

        </field>
    </fields><clear_result_fields>N</clear_result_fields>
<info_steps></info_steps><target_steps></target_steps><usage_parameters></usage_parameters>     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>416</xloc>
      <yloc>32</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Generate Rows</name>
    <type>RowGenerator</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <fields>
      <field>
        <name>testfield</name>
        <type>String</type>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <nullif>hello joe</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
    </fields>
    <limit>10</limit>
    <never_ending>N</never_ending>
    <interval_in_ms/>
    <row_time_field/>
    <last_time_field/>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>272</xloc>
      <yloc>336</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>User Defined Java Class</name>
    <type>UserDefinedJavaClass</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>

    <definitions>
        <definition>
        <class_type>TRANSFORM_CLASS</class_type>

        <class_name>Processor</class_name>

        <class_source><![CDATA[

import bioiq.*;

//import bioiq.src.bioiq.Crypto;
 

    public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException
{

     String key = "40kz0K+Kl62BOFY";    	  
    // String myout = "40kz0K+Kl62BOFY";

    String hello = "hello";

     bioiq.Crypto mycrypt = new bioiq.Crypto();
      
        
    Object[] r = getRow();

    if (r == null) {
      setOutputDone();
      return false;
    }

  if (first){
        first = false;
    }


    r = createOutputRow(r, data.outputRowMeta.size());

  // Get the value from an input field
     String inbound = get(Fields.In, "fname").getString(r);

//     String myout = mycrypt.encrypt(hello, key);
	 String myout = Crypto.encrypt(hello, key);

     get(Fields.Out, "myout").setValue(r, myout);

    putRow(data.outputRowMeta, r);
    
return true;
    
 
}

    ]]></class_source>
        </definition>
    </definitions>
    <fields>
        <field>
        <field_name>myout</field_name>

        <field_type>String</field_type>

        <field_length>-1</field_length>

        <field_precision>-1</field_precision>

        </field>
    </fields><clear_result_fields>Y</clear_result_fields>
<info_steps><info_step><step_tag>mytag</step_tag>
<step_name>ti&#x3a; sdi_hl7_obx_observation</step_name>
<step_description/>
</info_step></info_steps><target_steps></target_steps><usage_parameters></usage_parameters>     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>416</xloc>
      <yloc>224</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Write to log</name>
    <type>WriteToLog</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
      <loglevel>log_level_basic</loglevel>
      <displayHeader>Y</displayHeader>
      <limitRows>N</limitRows>
      <limitRowsNumber>0</limitRowsNumber>
      <logmessage/>
    <fields>
      </fields>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>624</xloc>
      <yloc>128</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>ti&#x3a; sdi_hl7_obx_observation</name>
    <type>TableInput</type>
    <description/>
    <distribute>N</distribute>
    <custom_distribution/>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <connection>IQ</connection>
    <sql>select fname from Member_Stage&#xa;limit 1&#xa;</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>208</xloc>
      <yloc>128</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>uppercase</name>
    <type>UserDefinedJavaClass</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>

    <definitions>
        <definition>
        <class_type>TRANSFORM_CLASS</class_type>

        <class_name>Processor</class_name>

        <class_source><![CDATA[public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException
{
	Object[] r = getRow();

	if (r == null) {
		setOutputDone();
		return false;
	}

    if (first){
        first = false;
    }

    r = createOutputRow(r, data.outputRowMeta.size());
	
    // Get the value from an input field
    String test_value = get(Fields.In, "testfield").getString(r);
	
	// play around with it
    String uppercase_value = test_value.toUpperCase();
    
    // Set a value in a new output field
    get(Fields.Out, "uppercase").setValue(r, uppercase_value);

	// Send the row on to the next step.
    putRow(data.outputRowMeta, r);

	return true;
}

]]></class_source>
        </definition>
    </definitions>
    <fields>
        <field>
        <field_name>uppercase</field_name>

        <field_type>String</field_type>

        <field_length>-1</field_length>

        <field_precision>-1</field_precision>

        </field>
    </fields><clear_result_fields>N</clear_result_fields>
<info_steps></info_steps><target_steps></target_steps><usage_parameters></usage_parameters>     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>704</xloc>
      <yloc>336</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>uppercase 2</name>
    <type>UserDefinedJavaClass</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>

    <definitions>
        <definition>
        <class_type>TRANSFORM_CLASS</class_type>

        <class_name>Processor</class_name>

        <class_source><![CDATA[
  import java.util.*;
  import pentaho.*;

public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException
{

    

	Object[] r = getRow();

	if (r == null) {
		setOutputDone();
		return false;
	}

    if (first){
        first = false;
    }

    r = createOutputRow(r, data.outputRowMeta.size());

	 	
	//	String out = mt.myreturn("joechi");
    //   String out = "yepper";

	
    // Get the value from an input field
    String test_value = get(Fields.In, "testfield").getString(r);
 	MyTest mt = new MyTest(test_value);
	String out = mt.myreturn(test_value);
   //  String out = mt.myreturn(out);
	// play around with it
    //String uppercase_value = test_value.toUpperCase();
    
    // Set a value in a new output field
    get(Fields.Out, "uppercase").setValue(r, out);

	// Send the row on to the next step.
    putRow(data.outputRowMeta, r);

	return true;
}

]]></class_source>
        </definition>
    </definitions>
    <fields>
        <field>
        <field_name>uppercase</field_name>

        <field_type>String</field_type>

        <field_length>-1</field_length>

        <field_precision>-1</field_precision>

        </field>
    </fields><clear_result_fields>N</clear_result_fields>
<info_steps></info_steps><target_steps></target_steps><usage_parameters></usage_parameters>     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>512</xloc>
      <yloc>336</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step_error_handling>
  </step_error_handling>
   <slave-step-copy-partition-distribution>
</slave-step-copy-partition-distribution>
   <slave_transformation>N</slave_transformation>

</transformation>
